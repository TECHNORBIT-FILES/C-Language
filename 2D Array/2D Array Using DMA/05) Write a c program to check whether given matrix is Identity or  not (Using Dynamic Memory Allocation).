//5) Write a c program to check whether given matrix is Identity or not (Using Dynamic Memory Allocation).
ANS:
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>


void main()
{

	int** p = NULL;
	int i, j;
	int count = 0;
	int count1 = 0;
	int count2 = 0;

	p = (int**)malloc(3 * sizeof(int*)); // vertical array

	for (i = 0; i < 3; i++)
	{
		*(p + i) = (int*)malloc(3 * sizeof(int)); // 3 horizontal array
	}

	printf("Please Enter the  values one by one:\n");
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			scanf("%d", *(p + i) + j);
		}
	}

	printf("The  Matrix is as Follows : \n");
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d\t", *(*(p + i) + j));
		}
		printf("\n");
	}

	//IsUpper trangular

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (*(*(p + i) + j) == 0 && i > j)
			{
				count++;
			}
		}
	}

	//Islower Trangular

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (*(*(p + i) + j) == 0 && j > i)
			{
				count1++;
			}
		}
	}

	//isIdentity Diagonal           [ 1 1 1]

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (*(*(p + i) + j) == 1 && j == i)
			{
				count2++;
			}
		}
	}
	if (count == 3 && count1 == 3 && count2 == 3)
	{
		printf("Given Matrix is an Identity Matrix :");
	}
	else
	{
		printf("Given Matrix is not an Identity Matrix :");
	}

	free(p);
	getch();
}

