//05)write a c program to replace one node with another at given position using linked list.
#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node* next;
};
struct node* createnode()
{
	int n;
	struct node* newnode = NULL;
	newnode = (struct node*)malloc(sizeof(struct node));
	if (newnode == NULL)
	{
		printf("memorynot allocated");
		return NULL;
	}
	else
	{
		printf("enter data:\n");
		scanf_s("%d", &n);
		newnode->data = n;
		newnode->next = NULL;
		return(newnode);
	}
}
void createlinkedlist(struct node** head)
{
	struct node* tempnode = NULL;
	struct node* travnode = *head;
	tempnode = createnode();
	if (*head == NULL)
	{
		*head = tempnode;
	}
	else
	{
		while (travnode->next != NULL)
		{
			travnode = travnode->next;
		} travnode->next =
			tempnode;
	}
}
void display(struct node* head)
{
	while (head != NULL)
	{
		printf("%d ", head->data);
		head = head->next;
	}
} int countnode(struct node* head)
{
	int count = 0;
	while (head != NULL)
	{
		count++;
		head = head->next;
	}
	return count;
} int swap(struct node* list, int pos1, int pos2)
{
	struct node* node1 = NULL, * node2 = NULL, * prev1, * prev2, * temp;
	int i;
	// Get the far position among both
	const int maxPos = (pos1 > pos2) ? pos1 : pos2;
	// Get total nodes in the list
	const int totalNodes = countnode(list);
	// Validate swap positions
	if ((pos1 <= 0 || pos1 > totalNodes) || (pos2 <= 0 || pos2 > totalNodes))
	{
		return -1;
	}
	// If both positions are same then no swapping required
	if (pos1 == pos2)
	{
		return 1;
	}
	// Identify both nodes to swap
	i = 1;
	temp = list;
	prev1 = NULL;
	prev2 = NULL;
	// Find nodes to swap
	while (temp != NULL && (i <= maxPos))
	{
		if (i == pos1 - 1)
			prev1 = temp;
		if (i == pos1)
			node1 = temp;
		if (i == pos2 - 1)
			prev2 = temp;
		if (i == pos2)
			node2 = temp;
		temp = temp->next;
		i++;
	}
	// If both nodes to swap are found.
	if (node1 != NULL && node2 != NULL)
	{
		// Link previous of node1 with node2
		if (prev1 != NULL)
			prev1->next = node2;
		// Link previous of node2 with node1
		if (prev2 != NULL)
			prev2->next = node1;
		// Swap node1 and node2 by swapping their
		// next node links
		temp = node1->next;
		node1->next = node2->next;
		node2->next = temp;
		// Make sure to swap head node when swapping
		// frst element.
		if (prev1 == NULL)
			list = node2;
		else if (prev2 == NULL)
			list = node1;
	}
	return 1;
}
void main()
{
	int pos1, pos2;
	struct node* frst = NULL;
	int ch = 1;
	do {
		printf("\n1.create linked list\n2.display linked list\n3.swap\n0.exit\n");
		printf("enter your choice:");
		scanf_s("%d", &ch);
		switch (ch)
		{
		case 1:
			createlinkedlist(&frst);
			break;
		case 2:
			display(frst);
			break;
		case 3:
			printf("\nEnter frst node position to swap: ");
			scanf_s("%d", &pos1);
			printf("\nEnter second node position to swap: ");
			scanf_s("%d", &pos2);
			if (swap(frst, pos1, pos2) == 1)
			{
			     printf("\nData swapped successfully.\n");
			     printf("Data in list after swapping %d node with %d: \n", pos1,
					pos2);
				display(frst);
			}
			else
			{
			      printf("Invalid position, please enter position greater than 0 and
					less than nodes in list.\n");
			}
		case 0:exit(0);
			break;
		}
	} while (ch != 0);
}
